<div id="classgodot_1_1RGMap">



</div>

[classgodot&#95;1&#95;1RGMap]

Class for managing maps for roguelike.

#include <span class="math">&lt;</span>rgmap.h<span class="math">&gt;</span>

Inheritance diagram for godot::RGMap:

!{width:auto;height:75px;}classgodot_1_1RGMap(image)!

*Signals*

[classgodot&#95;1&#95;1RGMap&#95;afd1aae74dc064d42ccf5b934472294cf] PoolIntArray *chunks&#95;load&#95;requested* ()

_*Signal.* Emited when chunks need to be loaded. Emited on calling request&#95;chunks&#95;update function_

[classgodot&#95;1&#95;1RGMap&#95;a2d061a66f56eb6392e41f4f9028d16fc] PoolIntArray *chunks&#95;free&#95;requested* ()

_*Signal.* Emited when chunks need to be freed. Emited on calling request&#95;chunks&#95;update function_

[classgodot&#95;1&#95;1RGMap&#95;abf1c8ce2971af113a8513d1b018e07cc] PoolIntArray *chunks&#95;render&#95;requested* ()

_*Signal.* Emited when chunks need to be rendered. Emited on calling request&#95;chunks&#95;render function_

[classgodot&#95;1&#95;1RGMap&#95;ab011bf3701f536742a9b37530c327312] PoolIntArray *chunks&#95;hide&#95;requested* ()

_*Signal.* Emited when rendered chunks need to be hidden. Emited on calling request&#95;chunks&#95;render function_

[classgodot&#95;1&#95;1RGMap&#95;a8f3bb2de68b7d4a239516015a86db8db] int *chunk&#95;loaded* ()

_*Signal.* Emited when is loaded for the first time. Emited on calling load&#95;chunk function_

[classgodot&#95;1&#95;1RGMap&#95;a74f8456f280ddaa8a3f3b3161a6ad63f] int *chunk&#95;freed* ()

_*Signal.* Emited when chunk is freed from memory. Emited on calling free&#95;chunk function_

*Tiles*

[classgodot&#95;1&#95;1RGMap&#95;a55c55e1a5e1386093860a634c33cee3d] void *add&#95;tile* (String name, String display&#95;name, bool passable, bool transparent)

_Add new tile._

[classgodot&#95;1&#95;1RGMap&#95;a0a6742a8d89a003db699ba02cd2f965a] int *get&#95;tiles&#95;count* ()

_Get number of tiles._

[classgodot&#95;1&#95;1RGMap&#95;ac7e85ab8ca5c1b3580a773b35a8386fd] int *get&#95;tile&#95;index* (String name)

_Get tile index by name._

[classgodot&#95;1&#95;1RGMap&#95;a9d0347ce24c61097eaca4292816b7ce3] String *get&#95;tile&#95;name* (int index)

_Get tile name (unique)_

[classgodot&#95;1&#95;1RGMap&#95;a30d5d2ff82cbb7b163b4f2f960180539] String *get&#95;tile&#95;display&#95;name* (int index)

_Get tile display name._

[classgodot&#95;1&#95;1RGMap&#95;ad407df53a5d381f958965c34acae88b1] bool *is&#95;tile&#95;passable* (int index)

_Check if tile is passable._

[classgodot&#95;1&#95;1RGMap&#95;a217ae3cae06583ad6e0eaf4c4a7ccf36] bool *is&#95;tile&#95;transparent* (int index)

_Check if tile is transparent._

Ref<span class="math">&lt;</span> TileSet <span class="math">&gt;</span> "generate&#95;tileset":#classgodot_1_1RGMap_a819587d899569b840a3f417aa9fd0c2f (String texture&#95;path, String texture&#95;format)

_Generate Tileset for using with 2d Tilemap._

*Chunks*

[classgodot&#95;1&#95;1RGMap&#95;a17d00e1acf01120ad1324704960ea528] int *get&#95;chunk&#95;index* (Vector2 position)

_Get index of chunk which contains a given position._

[classgodot&#95;1&#95;1RGMap&#95;aa042aaa2c6cbc4f67473574c4861cbf2] Vector2 *chunk&#95;index&#95;int&#95;to&#95;v2* (int index)

_Convert index of chunk from int to Vector2 format._

[classgodot&#95;1&#95;1RGMap&#95;a3ede385c9811d5c189943e42416af746] int *chunk&#95;index&#95;v2&#95;to&#95;int* (Vector2 index)

_Convert index of chunk from Vector2 to int format._

[classgodot&#95;1&#95;1RGMap&#95;ac47d550255055871d8b15ea21ccd7227] bool *is&#95;chunk&#95;in&#95;bounds* (int index)

_Check if chunk is in bounds._

[classgodot&#95;1&#95;1RGMap&#95;af9b781ce0c7fe4ccefa66fdcace66a0f] bool *is&#95;chunk&#95;loaded* (int index)

_Check if chunk is loaded._

[classgodot&#95;1&#95;1RGMap&#95;aff48c6694c9a7229c7603ec56fa19e8e] void *load&#95;chunk* (int index, PoolIntArray data=PoolIntArray())

_Load saved chunk to memory or generate a new chunk. ‘̈data‘̈ argument is optional._

[classgodot&#95;1&#95;1RGMap&#95;a05f17a76987156e6694a858d3dee1c49] PoolIntArray *dump&#95;chunk&#95;data* (int index)

_Returns all cell data for chunk as PoolIntArray._

[classgodot&#95;1&#95;1RGMap&#95;a97e1bbbce76aca2a37e08db6d793907e] void *free&#95;chunk* (int index)

_Free chunk from memory._

[classgodot&#95;1&#95;1RGMap&#95;af16dce1ae917a6a42c237d7e7eebda92] void *reset&#95;chunk* (int index)

_Clear all cell data in chunk._

[classgodot&#95;1&#95;1RGMap&#95;a12e1b530faa11809a3fb965924166324] bool *is&#95;chunk&#95;rendered* (int index)

_Check if chunk is rendered._

[classgodot&#95;1&#95;1RGMap&#95;a05420fcbc688769a4f97f4e068036609] void *set&#95;chunk&#95;rendered* (int index, bool value)

_Set rendering status of chunk._

[classgodot&#95;1&#95;1RGMap&#95;aaff3bdcfb3484ab4807bf536aa126e11] PoolIntArray *get&#95;loaded&#95;chunks* ()

_Get ids of loaded chunks._

PoolIntArray "get&#95;chunks&#95;to&#95;load":#classgodot_1_1RGMap_af81558e0a4b18590aea6f385f6fa345f (Vector2 player&#95;position)

_Get ids of chunks around player that needs to be loaded._

PoolIntArray "get&#95;chunks&#95;to&#95;free":#classgodot_1_1RGMap_ad292a1d8e79b597004643fbcf2e588f8 (Vector2 player&#95;position)

_Get ids of chunks that are loaded, but not needed anymore because player is too far._

void "request&#95;chunks&#95;update":#classgodot_1_1RGMap_a2c565c4b9124368ebdaae851afd13585 (Vector2 player&#95;position)

_Request chunk load/unload depending on player&#95;position and load&#95;distance._

[classgodot&#95;1&#95;1RGMap&#95;a2e9616170d0d2bb4e1e5946c4f9f8d60] PoolIntArray *get&#95;rendered&#95;chunks* ()

_Get ids of rendered chunks._

PoolIntArray "get&#95;chunks&#95;to&#95;render":#classgodot_1_1RGMap_a742bfc37a17e36f017d52f2bac8b698f (Vector2 player&#95;position)

_Get ids of chunks around player that needs to be rendered._

PoolIntArray "get&#95;chunks&#95;to&#95;hide":#classgodot_1_1RGMap_a251886c67ff84873042b83e836585203 (Vector2 player&#95;position)

_Get ids of chunks that are rendered, but not needed anymore because player is too far._

void "request&#95;chunks&#95;render":#classgodot_1_1RGMap_af97b719797501ed8525d3aad37ed83d7 (Vector2 player&#95;position)

_Request chunk render/hide depending on player&#95;position and render&#95;distance._

*Cells*

[classgodot&#95;1&#95;1RGMap&#95;ab201f09297e368756c390a122a94fc97] int *get&#95;local&#95;index* (Vector2 position)

_Get local index of cell within a chunk._

[classgodot&#95;1&#95;1RGMap&#95;a0608386ad66cec9e4257808022da5038] int *get&#95;value* (Vector2 position)

_Get value of cell._

[classgodot&#95;1&#95;1RGMap&#95;a4113d609f2d8b8ae8986b5261d72589a] String *get&#95;name* (Vector2 position)

_Get name of cell._

[classgodot&#95;1&#95;1RGMap&#95;a4016e0965171c95fd867bd7eb01b65d9] String *get&#95;display&#95;name* (Vector2 position)

_Get display name of cell._

[classgodot&#95;1&#95;1RGMap&#95;a37429fe0e0426653916667725477e01b] bool *is&#95;in&#95;bounds* (Vector2 position)

_Check if cell is in bounds._

[classgodot&#95;1&#95;1RGMap&#95;a9722afa05ac0d4efe1146a9f8b70908b] bool *is&#95;transparent* (Vector2 position)

_Check if cell is transparent._

[classgodot&#95;1&#95;1RGMap&#95;a6bc13a61c915adcfcd1c74d75b9a786a] bool *is&#95;passable* (Vector2 position)

_Check if cell is passable._

[classgodot&#95;1&#95;1RGMap&#95;a2ae7a1232b97d00c21a38a1073cb7b53] bool *is&#95;visible* (Vector2 position)

_Check if cell is visible._

[classgodot&#95;1&#95;1RGMap&#95;a735635c94c0913ffb0198dd51681986f] bool *is&#95;memorized* (Vector2 position)

_Check if cell is memorized._

[classgodot&#95;1&#95;1RGMap&#95;a90bbf21a0a0084bc3cada939c5b84848] bool *is&#95;pathfinding&#95;allowed* (Vector2 position)

_Check if pathfinding on this cell is allowed._

[classgodot&#95;1&#95;1RGMap&#95;abf819377354f5deaf670605175243442] void *set&#95;value* (Vector2 position, int value)

_Set value of cell._

[classgodot&#95;1&#95;1RGMap&#95;a0aad3be6e33070ebedb8ea3eb81789cf] void *set&#95;visibility* (Vector2 position, bool value)

_Set visibility of cell._

[classgodot&#95;1&#95;1RGMap&#95;ad15eb7048c2b0bdefcc22a6215e4eb36] void *set&#95;memorized* (Vector2 position, bool value)

_Set memory state of cell._

*View and pathfinding*

[classgodot&#95;1&#95;1RGMap&#95;abc95ec5b234f69d9f372483f22b8f602] PoolVector2Array *rpas&#95;calc&#95;visible&#95;cells&#95;from* (Vector2 center, int radius)

_Get list of cells visible from position within radius using RPAS algorithm._

[classgodot&#95;1&#95;1RGMap&#95;a449daffbdf681516e8a340e060edd0ef] void *calculate&#95;fov* (Vector2 view&#95;position, int max&#95;distance)

_Calculate visibility from given position and distance._

[classgodot&#95;1&#95;1RGMap&#95;a4a4b116053d6722cbb2bd325db94327e] void *add&#95;pathfinding&#95;exception* (Vector2 position, bool value)

_Allow/disallow patfinding for this cell ignoring passability._

[classgodot&#95;1&#95;1RGMap&#95;a6ec099f81053cdd7782a9ccac45ea54d] void *remove&#95;pathfinding&#95;exception* (Vector2 position)

_Remove all pathfinding exceptions for this cell if they exist._

PoolVector2Array "show&#95;pathfinding&#95;exceptions":#classgodot_1_1RGMap_a637933f2b9bb946f4a7b295fddaaf452 (bool exception&#95;type)

_Show all pathfinding exceptions of a type._

PoolVector2Array "find&#95;path":#classgodot_1_1RGMap_a0a0c87b9c381e59d241c298bbc7efd65 (Vector2 start, Vector2 end, Rect2 pathfinding&#95;zone, bool exclude&#95;undiscovered=false)

_Find path from start to end using A<span class="math">\ast</span> algorithm._

PoolVector2Array "get&#95;line":#classgodot_1_1RGMap_af5df74ee697c11151876e230fcfc2c09 (Vector2 start, Vector2 end, bool allow&#95;diagonal=true)

_Get a set of points in Bresenhams line._

[classgodot&#95;1&#95;1RGMap&#95;af8078e95e12994ce402bd4a3880008db] Vector2 *raycast&#95;vision* (Vector2 start, Vector2 end)

_Cast ray from start to end and return position where vision is blocked by an obstacle._

[classgodot&#95;1&#95;1RGMap&#95;a71f82c2deaa4c5ea9ec5ca0e43176d4a] Vector2 *raycast&#95;path* (Vector2 start, Vector2 end)

_Cast ray from start to end and return position where path is blocked by an obstacle._

bool "visibility&#95;between":#classgodot_1_1RGMap_aa0e99aed1a2d145536439b9a88b9ae30 (Vector2 start, Vector2 end, int max&#95;distance)

_Check if end point is visisble from start point._

*Editing*

[classgodot&#95;1&#95;1RGMap&#95;a831fb561ec538f9dd241174079927b62] void *clean&#95;map* ()

_Free all chunks and forget pathfinding exceptions._

[classgodot&#95;1&#95;1RGMap&#95;a6e4b777d25b43065a5e2092d084099ee] void *place&#95;map* ("RGMap":#classgodot_1_1RGMap <span class="math">\ast</span>another&#95;map, Vector2 start)

_Place another map inside this map._

[classgodot&#95;1&#95;1RGMap&#95;af9d1f6508a2ad834c7050d12759342fd] void *draw&#95;line* (Vector2 start, Vector2 end, int value, bool allow&#95;diagonal=true)

_Draw straight line using Bresenhams line algorithm._

[classgodot&#95;1&#95;1RGMap&#95;a17af65d748b00d68c9403e6c016508c6] void *draw&#95;rect* (Rect2 rect, int value)

_Draw rect borders._

[classgodot&#95;1&#95;1RGMap&#95;a04245c368f06c61fad83c181b91592a6] void *fill&#95;rect* (Rect2 rect, int value)

_Fill rect._

void "draw&#95;ellipse":#classgodot_1_1RGMap_ade0f1244d005d7440fe0d3731b863b36 (Vector2 center, Vector2 radius, float start&#95;angle, float end&#95;angle, int value, bool allow&#95;diagonal=true)

_Draw ellipse using Bresenhams midpoint algorithm._

[classgodot&#95;1&#95;1RGMap&#95;acc0515cfaf9bbe8d65c9c374899fd8f8] void *fill&#95;ellipse* (Vector2 center, Vector2 radius, float start&#95;angle, float end&#95;angle, int value)

_Fill ellipse._

[classgodot&#95;1&#95;1RGMap&#95;a366bf4bff59dfef02e8997f1b67a1eb5] void *draw&#95;circle* (Vector2 center, float radius, int value, bool allow&#95;diagonal=true)

_Draw circle._

[classgodot&#95;1&#95;1RGMap&#95;ade7a912c5bbcc60f398f16fd264dc464] void *fill&#95;circle* (Vector2 center, float radius, int value)

_Fill circle._

[classgodot&#95;1&#95;1RGMap&#95;ae123137e6645f64ac5b8a5fba6598e0f] void *draw&#95;arc* (Vector2 center, float radius, float start&#95;angle, float end&#95;angle, int value, bool allow&#95;diagonal=true)

_Draw arc._

[classgodot&#95;1&#95;1RGMap&#95;ae51cf8952917fd840f67d62ce129df71] void *fill&#95;arc* (Vector2 center, float radius, float start&#95;angle, float end&#95;angle, int value)

_Fill arc._

*Entities*

[classgodot&#95;1&#95;1RGMap&#95;ae7a3643c8a808a0860b62dbd672d9311] int *add&#95;entity* (Vector2 position, bool passability, bool transparency)

_Add new entity to the map. Returns id given to a new entity._

[classgodot&#95;1&#95;1RGMap&#95;adf896538adc5e7bcd5f8cb584fe0cf5c] void *remove&#95;entity* (int id)

_Remove entity from memory. The id of this entity will also be given to a new entity._

[classgodot&#95;1&#95;1RGMap&#95;a8108573f1cf887b3f8263102ae2a3e39] void *move&#95;entity* (int id, Vector2 position)

_Move entity to a new position._

[classgodot&#95;1&#95;1RGMap&#95;a9c399e3eecf2729291e145b8f330b18b] void *set&#95;entity&#95;transparency* (int id, bool value)

_Change entity transparency._

[classgodot&#95;1&#95;1RGMap&#95;a30bc4ade51798b8208d17a33d890422d] void *set&#95;entity&#95;passability* (int id, bool value)

_Change entity passability._

[classgodot&#95;1&#95;1RGMap&#95;a4dff79eace0ca3c3468429d71bf7b1b0] void *set&#95;entity&#95;memorized* (int id, bool value)

_Change memory status of entity._

[classgodot&#95;1&#95;1RGMap&#95;a06d853a154fb9288f0eaa051cfd5c27f] bool *is&#95;entity&#95;visible* (int id)

_Check if entity is visible._

[classgodot&#95;1&#95;1RGMap&#95;aca51c1b240ff80577646ddbe74edf31b] bool *is&#95;entity&#95;transparent* (int id)

_Check if entity is transparent;._

[classgodot&#95;1&#95;1RGMap&#95;a712b3f1d95d44c000949829def9b6e91] bool *is&#95;entity&#95;passable* (int id)

_Check if entity is passable._

[classgodot&#95;1&#95;1RGMap&#95;abe18e0c06bc081071a56d9d216186421] bool *is&#95;entity&#95;memorized* (int id)

_Check if entity is memorized._

[classgodot&#95;1&#95;1RGMap&#95;a97be562b35c3daf51f49e134b93dbc9d] bool *is&#95;entity&#95;chunk&#95;loaded* (int id)

_Check if entity is on loaded chunk._

[classgodot&#95;1&#95;1RGMap&#95;a0a39e73b2e10796ffe72c590f3347989] bool *is&#95;entity&#95;chunk&#95;rendered* (int id)

_Check if entity is on rendered chunk._

[classgodot&#95;1&#95;1RGMap&#95;a000af6feda1d67bcc014fc52a5871e50] Vector2 *get&#95;entity&#95;position* (int id)

_Get position of the entity._

[classgodot&#95;1&#95;1RGMap&#95;a1030a2d395f2773dba6950096d60fdf9] PoolIntArray *get&#95;entities&#95;in&#95;position* (Vector2 position)

_Find ids of all entities in position._

[classgodot&#95;1&#95;1RGMap&#95;a2742fb3f44caa25d078abe67feec9d77] PoolIntArray *get&#95;entities&#95;in&#95;rect* (Rect2 rect)

_Find ids of all entities in rect._

[classgodot&#95;1&#95;1RGMap&#95;a74c42c8fc68967a33b970c27457e9abf] PoolIntArray *get&#95;entities&#95;in&#95;radius* (Vector2 position, int radius)

_Find ids of all entities in radius._

[classgodot&#95;1&#95;1RGMap&#95;a3101593907cf4928bbffc94a1e5f950f] PoolIntArray *get&#95;entities&#95;in&#95;chunk* (int chunk&#95;index)

_Find ids of all entities in chunk._

*Saving and Loading*

[classgodot&#95;1&#95;1RGMap&#95;a673f7f9e37f280588ccff46b1f46d38e] PoolIntArray *dump&#95;map&#95;data* ()

_Save map data._

[classgodot&#95;1&#95;1RGMap&#95;aa2accf67955f8a3fb5fb30a649e6132d] void *load&#95;map&#95;data* (PoolIntArray map&#95;data)

_Load map data._

[classgodot&#95;1&#95;1RGMap&#95;a3fba15a031ad1bd976b281cefe90bc79] Vector2 *chunk&#95;size* = Vector2(50,50)

_Size of one chunk (Default: 50x50)_

[classgodot&#95;1&#95;1RGMap&#95;a4a8e96884242e6b83b2417d127a814a8] Vector2 *size* = Vector2(3,3)

_Size of the whole map in chunks (Default: 3x3)_

int "load&#95;distance":#classgodot_1_1RGMap_ab097624100d11699293844ead170dab9 = 1

_Number of chunks loaded around the player._

int "render&#95;distance":#classgodot_1_1RGMap_aef65b060d5dbda0c47f00d2431921b49 = 1

_Number of chunks rendered around the player._

[classgodot&#95;1&#95;1RGMap&#95;a092151ec6eda7be42513f17eb9ebfe1f] bool *allow&#95;diagonal&#95;pathfinding* = true

_Allow/Disallow diagonal pathfinding._

*FOV*

_Variables related to FOV calculation using RPAS algorithm_ 

[classgodot&#95;1&#95;1RGMap&#95;ad6b261d97c61db7c511faa45905eea3d] float *RPAS&#95;RADIUS&#95;FUDGE* = 1. / 3.

_How smooth the edges of the vision bubble are. Between 0 and 1._

[classgodot&#95;1&#95;1RGMap&#95;abfab661cb4533aee01402a3a7b1acb7b] bool *RPAS&#95;NOT&#95;VISIBLE&#95;BLOCKS&#95;VISION* = true

_If this is false, some cells will unexpectedly be visible._

int "RPAS&#95;RESTRICTIVENESS":#classgodot_1_1RGMap_a98a2a7a44cf00487360159e89be37401 = 1

_Determines how restrictive the algorithm is._

[classgodot&#95;1&#95;1RGMap&#95;ac743a18b1c2c2193e92aac307f1c1478] bool *RPAS&#95;VISIBLE&#95;ON&#95;EQUAL* = true

_If false, an obstruction will obstruct its endpoints._

[classgodot&#95;1&#95;1RGMap&#95;a07f1fef452ab37ad0bc6a5a46ed65834] *RGMap* ()

[classgodot&#95;1&#95;1RGMap&#95;aa2f66b3c45e245abd84fca56ae7097a2] *<span class="math">\sim</span>RGMap* ()

[classgodot&#95;1&#95;1RGMap&#95;a6a124ddb92eb57514b32f106babd40eb] void *&#95;init* ()

[classgodot&#95;1&#95;1RGMap&#95;af167d83fed1892421dd86f2089d45fef] static void *&#95;register&#95;methods* ()

Class for managing maps for roguelike.

[classgodot&#95;1&#95;1RGMap&#95;ade0f1244d005d7440fe0d3731b863b36]

void RGMap::draw&#95;ellipse (

center, 

radius, 

start&#95;angle, 

end&#95;angle, 

value, 

allow&#95;diagonal = true 

)

Draw ellipse using Bresenhams midpoint algorithm.

Tweaked version of code from here: "@ https://www.geeksforgeeks.org/midpoint-ellipse-drawing-algorithm/@":https://www.geeksforgeeks.org/midpoint-ellipse-drawing-algorithm/ [classgodot&#95;1&#95;1RGMap&#95;a0a0c87b9c381e59d241c298bbc7efd65]

PoolVector2Array RGMap::find&#95;path (

start, 

end, 

pathfinding&#95;zone, 

exclude&#95;undiscovered = false 

)

Find path from start to end using A<span class="math">\ast</span> algorithm.

Returns PoolVector2Array

Parameters _start_ &amp; Start point
_end_ &amp; Target point
_pathfinding&#95;zone_ &amp; Rect2 zone where pathfinding is calculated
_exclude&#95;undiscovered_ &amp; True to exclude undiscovered cells (Fefault: False)


[classgodot&#95;1&#95;1RGMap&#95;a819587d899569b840a3f417aa9fd0c2f]

Ref<span class="math">&lt;</span> TileSet <span class="math">&gt;</span> RGMap::generate&#95;tileset (

texture&#95;path, 

texture&#95;format 

)

Generate Tileset for using with 2d Tilemap.

Parameters _texture&#95;path_ &amp; A directory within the project where textures are stored (e.g ‘̈res://Textures/‘̈)
_texture&#95;format_ &amp; A format of textures (e.g ‘̈.png‘̈)


[classgodot&#95;1&#95;1RGMap&#95;ad292a1d8e79b597004643fbcf2e588f8]

PoolIntArray RGMap::get&#95;chunks&#95;to&#95;free (

player&#95;position 

)

Get ids of chunks that are loaded, but not needed anymore because player is too far.

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses load&#95;distance parameter to define the radius


[classgodot&#95;1&#95;1RGMap&#95;a251886c67ff84873042b83e836585203]

PoolIntArray RGMap::get&#95;chunks&#95;to&#95;hide (

player&#95;position 

)

Get ids of chunks that are rendered, but not needed anymore because player is too far.

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses render&#95;distance parameter to define the radius


[classgodot&#95;1&#95;1RGMap&#95;af81558e0a4b18590aea6f385f6fa345f]

PoolIntArray RGMap::get&#95;chunks&#95;to&#95;load (

player&#95;position 

)

Get ids of chunks around player that needs to be loaded.

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses load&#95;distance parameter to define the radius Skips chunks that were already loaded


[classgodot&#95;1&#95;1RGMap&#95;a742bfc37a17e36f017d52f2bac8b698f]

PoolIntArray RGMap::get&#95;chunks&#95;to&#95;render (

player&#95;position 

)

Get ids of chunks around player that needs to be rendered.

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses render&#95;distance parameter to define the radius Skips chunks that were already rendered


[classgodot&#95;1&#95;1RGMap&#95;af5df74ee697c11151876e230fcfc2c09]

PoolVector2Array RGMap::get&#95;line (

start, 

end, 

allow&#95;diagonal = true 

)

Get a set of points in Bresenhams line.

Based on Python implementation from here: "@ http://www.roguebasin.com/index.php/Bresenham%27s_Line_Algorithm@":http://www.roguebasin.com/index.php/Bresenham%27s_Line_Algorithm [classgodot&#95;1&#95;1RGMap&#95;af97b719797501ed8525d3aad37ed83d7]

void RGMap::request&#95;chunks&#95;render (

player&#95;position 

)

Request chunk render/hide depending on player&#95;position and render&#95;distance.

Emits ‘̈chunks&#95;render&#95;requested‘̈ and ‘̈chunks&#95;hide&#95;requested‘̈ signals Will produce the same result until chunks will be rendered/hidden from other script Does nothing if all needed chunks are rendered and all unneeded chunks are hidden

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses render&#95;distance parameter to define the radius


[classgodot&#95;1&#95;1RGMap&#95;a2c565c4b9124368ebdaae851afd13585]

void RGMap::request&#95;chunks&#95;update (

player&#95;position 

)

Request chunk load/unload depending on player&#95;position and load&#95;distance.

Emits ‘̈chunks&#95;load&#95;requested‘̈ and ‘̈chunks&#95;free&#95;requested‘̈ signals Will produce the same result until chunks will be loaded/freed from other script Does nothing if all needed chunks are loaded and all unneeded chunks are freed

Parameters _player&#95;position_ &amp; Vector2 position of the player Uses load&#95;distance parameter to define the radius


[classgodot&#95;1&#95;1RGMap&#95;a637933f2b9bb946f4a7b295fddaaf452]

PoolVector2Array RGMap::show&#95;pathfinding&#95;exceptions (

exception&#95;type 

)

Show all pathfinding exceptions of a type.

Parameters _exception&#95;type_ &amp; true for allowed cells, false for disallowed cells


[classgodot&#95;1&#95;1RGMap&#95;aa0e99aed1a2d145536439b9a88b9ae30]

bool RGMap::visibility&#95;between (

start, 

end, 

max&#95;distance 

)

Check if end point is visisble from start point.

Parameters _start_ &amp; Start point
_end_ &amp; Target point
_max&#95;distance_ &amp; Maximum distance at which points are visible


[classgodot&#95;1&#95;1RGMap&#95;ab097624100d11699293844ead170dab9] int godot::RGMap::load&#95;distance = 1

Number of chunks loaded around the player.

Excluding the chunk where player stands Default: 1 (3x3 grid) [classgodot&#95;1&#95;1RGMap&#95;aef65b060d5dbda0c47f00d2431921b49] int godot::RGMap::render&#95;distance = 1

Number of chunks rendered around the player.

Excluding the chunk where player stands Default: 1 (3x3 grid) [classgodot&#95;1&#95;1RGMap&#95;a98a2a7a44cf00487360159e89be37401] int godot::RGMap::RPAS&#95;RESTRICTIVENESS = 1

Determines how restrictive the algorithm is.

0 &#45; if you have a line to the near, center, or far, it will return as visible   &#45; if you have a line to the center and at least one other corner it will return as visible   &#45; if you have a line to all the near, center, and far, it will return as visible