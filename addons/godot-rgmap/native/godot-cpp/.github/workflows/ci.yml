name: Continuous integration
on: [push, pull_request]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: üêß Linux (GCC)
            os: ubuntu-18.04
            platform: linux
            artifact-name: godot-cpp-linux-glibc2.27-x86_64-release
            artifact-path: bin/libgodot-cpp.linux.release.64.a
            godot_zip: Godot_v3.4-stable_linux_server.64.zip
            executable: Godot_v3.4-stable_linux_server.64

          - name: üèÅ Windows (x86_64, MSVC)
            os: windows-2019
            platform: windows
            artifact-name: godot-cpp-windows-msvc2019-x86_64-release
            artifact-path: bin/libgodot-cpp.windows.release.64.lib

          - name: üèÅ Windows (x86_64, MinGW)
            os: windows-2019
            platform: windows
            artifact-name: godot-cpp-linux-mingw-x86_64-release
            artifact-path: bin/libgodot-cpp.windows.release.64.a
            flags: use_mingw=yes

          - name: üçé macOS (universal)
            os: macos-11
            platform: osx
            artifact-name: godot-cpp-macos-universal-release
            artifact-path: bin/libgodot-cpp.osx.release.64.a
            flags: macos_arch=universal
            godot_zip: Godot_v3.4-stable_osx.universal.zip
            executable: Godot.app/Contents/MacOS/Godot

          - name: ü§ñ Android (arm64)
            os: ubuntu-18.04
            platform: android
            artifact-name: godot-cpp-android-arm64-release
            artifact-path: bin/libgodot-cpp.android.release.arm64v8.a
            flags: android_arch=arm64v8

          - name: üçè iOS (arm64)
            os: macos-11
            platform: ios
            artifact-name: godot-cpp-ios-arm64-release
            artifact-path: bin/libgodot-cpp.ios.release.arm64.a

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Set up Python (for SCons)
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Linux dependencies
        if: ${{ matrix.platform == 'linux' }}
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qqq build-essential pkg-config

      - name: Install scons
        run: |
          python -m pip install scons

      - name: Windows dependency (MinGW)
        if: ${{ matrix.platform == 'windows' }}
        uses: egor-tensin/setup-mingw@v2

      - name: Build godot-cpp (debug)
        run: |
          scons platform=${{ matrix.platform }} target=debug generate_bindings=yes ${{ matrix.flags }} -j2

      - name: Build test without rebuilding godot-cpp (debug)
        run: |
          cd test
          scons platform=${{ matrix.platform }} target=debug ${{ matrix.flags }} build_library=no -j2

      - name: Build test and godot-cpp (release)
        run: |
          cd test
          scons platform=${{ matrix.platform }} target=release ${{ matrix.flags }} -j2

      - name: Run test GDNative library
        if: ${{ matrix.platform == 'linux' || matrix.platform == 'osx' }}
        run: |
          curl -LO https://downloads.tuxfamily.org/godotengine/3.4/${{ matrix.godot_zip }}
          unzip ${{ matrix.godot_zip }}
          ./${{ matrix.executable }} --path test -s script.gd

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.artifact-name }}
          path: ${{ matrix.artifact-path }}
          if-no-files-found: error

  static-checks:
    name: Static Checks (clang-format)
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Make apt sources.list use the default Ubuntu repositories
        run: |
          sudo rm -f /etc/apt/sources.list.d/*
          sudo cp -f misc/ci/sources.list /etc/apt/sources.list
          sudo apt-get update

      - name: Install dependencies
        run: |
          sudo apt-get install -qq dos2unix recode clang-format-11
          sudo update-alternatives --remove-all clang-format
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-11 100

      - name: Style checks via clang-format
        run: |
          bash ./misc/scripts/clang_format.sh
